<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>project2</title>
      <link href="/2022/08/29/project2/"/>
      <url>/2022/08/29/project2/</url>
      
        <content type="html"><![CDATA[<h1 id="HALP-ME"><a href="#HALP-ME" class="headerlink" title="HALP ME!!"></a>HALP ME!!</h1><h2 id="BEB-05-Second-Project-Team-05"><a href="#BEB-05-Second-Project-Team-05" class="headerlink" title="BEB 05 Second Project Team 05"></a>BEB 05 Second Project Team 05</h2><h2 id="💡Project-Intro"><a href="#💡Project-Intro" class="headerlink" title="💡Project Intro"></a>💡Project Intro</h2><blockquote><p><strong>Web2.0에서 블록체인 인센티브 기반 커뮤니티 사이트를 개발.</strong></p><ul><li>목표 : 중앙화된 Web2.0 인센티브 기반 커뮤니티 구현.</li><li>기획 구분 : FE, BE, SmartContract.</li></ul></blockquote><h2 id="Incentive-Community"><a href="#Incentive-Community" class="headerlink" title="Incentive Community ?"></a>Incentive Community ?</h2><aside>➡️ 인센티브 기반 ?<p><strong>자체적인 토큰을 가지고 참여자를 유도</strong>하는 생태계 빌딩. 사용자가 어떤 행동을 했을 때 <strong>토큰을 인센티브로 지급</strong>하는 것. </p></aside><h2 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h2><blockquote><p>인센티브 기반 커뮤니티 구성 : <strong>FE, BE, SmartContract.</strong></p><ul><li>각 부분 마다 달성 <strong>Bare minimum</strong> 존재.</li></ul></blockquote><p>→ 웹페이지 설계 부분은 기본적인 가이드라인 제공.</p><h3 id="기획"><a href="#기획" class="headerlink" title="기획"></a>기획</h3><blockquote><p>**인센티브 커뮤니티(;IC)**는 <strong>특정한 주제를 좋아하는 사람들이 모여서 게시글을 작성</strong>하는 곳. 특정 주제를 좋아하는 사람들이 모여서 정보와 일상을 나누며 활발한 웹페이지가 되는 것이 목표.</p></blockquote><ul><li>사용자가 커뮤니티에 게시글 작성할 때마다 IC 토큰을 보상으로 받는다.</li><li>해당 IC 토큰은 타인에게 전송 가능하다.</li><li>IC 토큰을 사용하여 NFT 민팅을 할 수 있다.</li><li>해당 NFT는 유저가 원하는 사진으로 만든다.</li><li>마이페이지에서 내가 받은 IC 토큰의 개수와 내가 구입한 NFT를 확인할 수 있다.</li><li>마이페이지에서 내가 쓴 글을 볼 수 있다.</li><li>마이페이지에서 타인에게 내가 가진 토큰을 줄 수 있다.</li></ul><p>→ 토큰 보상 유발 행위 : 게시글 작성. But, 게시글 작성 이외 다른 것을 해도 ㄱㅊ.</p><p>→ 기본적인 기획 이외의 추가할 기획이 있으면 추가해도 되지만, 기본적인 기획은 프로젝트에 반드시 포함.</p><h3 id="프로젝트-요구사항"><a href="#프로젝트-요구사항" class="headerlink" title="프로젝트 요구사항"></a>프로젝트 요구사항</h3><ul><li>커뮤니티에 게시글을 작성(혹은 댓글을 다는 등, 자유롭게 설정)할 수 있고, 이에 따른 보상으로 ERC-20 토큰을 지급하는 기능 (핵심 feature)<ul><li>‘특정 주제’를 좋아하는 사람들의 모임을 활성화하기 위함</li><li>‘특정 주제’는 자유롭게 설정이 가능함</li></ul></li><li>ERC-20 토큰을 ERC-721 토큰과 교환할 수 있는 기능<ul><li>ERC-20의 경우, 서버 ↔ 사용자, 사용자 ↔ 사용자 둘 다 가능해야 함</li></ul></li><li>회원가입 시 자동으로 지갑 주소를 부여받는 기능</li><li>Daemon을 개발하여 트랜잭션을 트래킹할 수 있는 기능</li><li>NFT를 민팅할 수 있는 기능</li><li>내 정보를 볼 수 있어야 함</li></ul><hr><h2 id="🚨-팀-소개"><a href="#🚨-팀-소개" class="headerlink" title="🚨 팀 소개"></a>🚨 팀 소개</h2><h3 id="BEB-05-02-05조"><a href="#BEB-05-02-05조" class="headerlink" title="BEB-05-02-05조"></a>BEB-05-02-05조</h3><h3 id="💡Project-HALP-ME"><a href="#💡Project-HALP-ME" class="headerlink" title="💡Project : HALP ME!!"></a>💡Project : HALP ME!!</h3><ul><li><strong>팀명 : HALP ME!</strong></li><li><strong>팀장 : 홍유진</strong></li><li><strong>팀원 : 박수연, 이송영, 안병현</strong></li><li><strong>Site  Link</strong> :</li><li><strong>Date</strong> : 2022&#x2F;08&#x2F;17 - 2022&#x2F;08&#x2F;30</li></ul><h3 id="💡-HALP-Project-Intro"><a href="#💡-HALP-Project-Intro" class="headerlink" title="💡 HALP Project Intro"></a>💡 HALP Project <strong>Intro</strong></h3><aside>➡️ 질의응답 커뮤니티. 사용자는 질문에 대한 게시글을 작성하고, 다른 사용자들이 해당 게시글에 답변을 댓글로 작성한다. 질문을 한 사용자는 게시글에 달린 답변 댓글 중 가장 적합한 답변을 채택한다. 채택받은 댓글의 사용자는 IC토큰을 보상으로 받는다.</aside><h3 id="역할"><a href="#역할" class="headerlink" title="역할"></a>역할</h3><table><thead><tr><th>이름</th><th>포지션</th></tr></thead><tbody><tr><td>박수연</td><td>FE</td></tr><tr><td>이송영</td><td>FE</td></tr><tr><td>안병현</td><td>BE, SC</td></tr><tr><td>홍유진</td><td>BE, SC</td></tr></tbody></table><p>💻 <strong>FE</strong></p><blockquote><p>웹의 View를 유저 플로우에 따라 구성할 수 있고, 개발하기.</p></blockquote><p>💻 <strong>SC</strong></p><blockquote><p>스마트 컨트랙트 개발을 위해 솔리디티 언어를 다루고, 분석하고, 적용 가능. 기본으로 제공되는 ERC-20, ERC-721 스마트 컨트랙트 코드 외의 덧붙일 기능은 응용하여 코드 작성해야함.</p></blockquote><p>→ 솔리디티로 작성된 ERC-20,  ERC-721 코드를 파악하고, 응용할 수 있다.</p><p>💻 <strong>BE</strong></p><blockquote><p>백엔드에서 지갑 생성, 서명 및 전송 담당. 서버 구축, 지갑 생성 및 관리, 스마트 컨트랙트와 서버를 연동하여 사용. 동작 확인을 위해 실시간 트래킹.</p></blockquote><h2 id="저장소"><a href="#저장소" class="headerlink" title="저장소"></a>저장소</h2><h3 id="팀-레포"><a href="#팀-레포" class="headerlink" title="팀 레포"></a>팀 레포</h3><p><a href="https://github.com/codestates/BEB-05-HALPME">https://github.com/codestates/BEB-05-HALPME</a></p><h3 id="개인-레포"><a href="#개인-레포" class="headerlink" title="개인 레포"></a>개인 레포</h3><p><a href="https://github.com/yu-uj/BEB-05-HALPME">https://github.com/yu-uj/BEB-05-HALPME</a></p><hr><h2 id="기술-스택"><a href="#기술-스택" class="headerlink" title="기술 스택"></a>기술 스택</h2><h3 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h3><table><thead><tr><th>Language</th><th>JavaScript</th><th>*</th></tr></thead><tbody><tr><td>Server Framework</td><td>Node.js</td><td>*</td></tr><tr><td>Contract Language</td><td>Solidity</td><td>SC</td></tr><tr><td>Container</td><td>Ganache</td><td>SC</td></tr><tr><td>Web Library</td><td>React</td><td>FE</td></tr><tr><td>Database(DB)</td><td>MySQL</td><td>BE</td></tr><tr><td>Web Library</td><td>Redux</td><td>FE</td></tr><tr><td>Web Library</td><td>Babel</td><td>BE</td></tr><tr><td>Web Library</td><td>Bootstrap</td><td>FE</td></tr><tr><td>Web Framework</td><td>Express.js</td><td>BE</td></tr><tr><td>JavaScript Library</td><td>Web3.js</td><td>SC</td></tr><tr><td>Framework</td><td>Truffle</td><td>SC</td></tr><tr><td>Framework</td><td>OpenZepplin</td><td>SC</td></tr></tbody></table><h3 id="Position-Tech"><a href="#Position-Tech" class="headerlink" title="Position Tech"></a>Position Tech</h3><table><thead><tr><th>Position</th><th>기술 스택</th></tr></thead><tbody><tr><td>Front-End</td><td>React, Redux, Bootstrap</td></tr><tr><td>Back-End</td><td>MySQL, Babel, Express</td></tr><tr><td>Smart-Contract</td><td>Solidity, Web3.js, Truffle, OpenZepplin</td></tr></tbody></table><h3 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h3><table><thead><tr><th>OS</th><th>MacOS, Ubuntu</th></tr></thead><tbody><tr><td>IDE</td><td>VisualStudioCode</td></tr><tr><td>개발 도구</td><td>Git</td></tr><tr><td>개발 언어</td><td>JavaScript, Solidity</td></tr><tr><td>테스트 네트워크</td><td>Ganache(ETH)</td></tr><tr><td>지갑</td><td>MetaMask</td></tr><tr><td>문서 관리</td><td>Notion</td></tr></tbody></table><hr><h2 id="구현-기능"><a href="#구현-기능" class="headerlink" title="구현 기능"></a>구현 기능</h2><h3 id="🔗-주요-기능"><a href="#🔗-주요-기능" class="headerlink" title="🔗 주요 기능"></a>🔗 주요 기능</h3><p><strong>▶️ 회원관리</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 아이디와 패스워드를 입력하여 회원가입할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 아이디와 패스워드를 사용하여 로그인할 수 있다.</li></ul><p><strong>▶️ 게시글</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 게시글을 작성할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 게시글 목록을 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 게시글 상세 내용을 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 게시글에 대한 댓글을 작성할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신의 게시글에 달린 댓글 중 하나의 댓글을 채택할 수 있다.</li></ul><p><strong>▶️ 마이페이지</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 자신의 정보를 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 소유한 NFT 목록을 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 소유한 토큰의 개수를 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 게시글을 확인할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신의 토큰을 다른 사용자에게 전송할 수 있다.</li></ul><p><strong>▶️ 토큰</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 댓글이 채택됨으로, 토큰을 획득할 수 있다.</li></ul><p><strong>▶️ NFT</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 NFT를 생성할 수 있다.</li></ul><h3 id="🔗-추가-기능"><a href="#🔗-추가-기능" class="headerlink" title="🔗 추가 기능"></a>🔗 추가 기능</h3><p><strong>▶️ 게시글</strong></p><ul><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 게시글을 수정할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 게시글을 삭제할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 댓글을 수정할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 자신이 작성한 댓글을 삭제할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 게시글에 좋아요를 표시할 수 있다.</li><li><input disabled="" type="checkbox"> 사용자는 댓글에 좋아요를 표시할 수 있다.</li></ul><h3 id="🔗-Night-Mare"><a href="#🔗-Night-Mare" class="headerlink" title="🔗 Night Mare"></a>🔗 Night Mare</h3><ul><li><input disabled="" type="checkbox"> 사용자는 소유한 nft를 전송할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 nft를 고정된 가격에 구매하거나 경매할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 카테고리의 Explore에서 nft 조회 방식을 선택할 수 있다</li></ul><table><thead><tr><th>Category</th><th>Sub-Category</th><th>Desc.</th></tr></thead><tbody><tr><td>General</td><td>Navbar</td><td>Components</td></tr></tbody></table><ul><li>Logo: 누르면 홈으로 이동</li><li>Market</li><li>MyPage</li><li>Signup, Signin</li><li>ETH Faucet |<br>|  | Footer | 팀 정보 및 깃헙 페이지 등 기본적인 정보가 표시된다. |<br>| 회원관리 | General | 아이디와 패스워드를 입력받아 서버에서 지갑을 생성해준다. |<br>|  | 회원가입 | 아이디, 닉네임, 패스워드를 입력한다. |<br>|  | 로그인&#x2F;로그아웃 | 아이디와 패스워드를 입력한다. |<br>| 게시판 | General |  |<br>|  | 게시글 리스트 |  |<br>|  | 게시글 상세 | 번호, 제목, 작성자, 생성일, 조회수 등의 정보가 표시된다.<br>채택된 댓글을 하이라이트로 표시된다. |<br>|  | 게시글 작성 |  |<br>|  | 댓글 작성 |  |<br>| NFT 민팅 | - | 사진 주소 폼과 구입 버튼이 표시된다. |<br>| 마이 페이지 | General | 다음의 내용이 표시된다.</li><li>나의 정보: 닉네임, 지갑주소</li><li>토큰(FT) 개수</li><li>나의 NFT</li><li>작성한 게시글 |<br>|  | 토큰 전송 | 상대방 계정, 보낼 토큰 개수를 입력할 수 있는 칸이 표시된다. |</li></ul><hr><h2 id="시나리오"><a href="#시나리오" class="headerlink" title="시나리오"></a>시나리오</h2><p><strong>Home</strong></p><ul><li>기본 Index 화면.</li><li>왼쪽 상단의 사이트 로고 클릭시 홈(Home)으로 이동한다.</li></ul><p><strong>Navigation</strong></p><ul><li>Home 화면 상단에 위치.</li><li>Login &#x2F; Sign 클릭시 login과 sign 선택 화면으로 이동한다.</li><li>Market 클릭시 market 화면으로 이동한다.</li><li>Create 클릭시 NFTcreate 화면으로 이동한다.</li><li>My Page 클릭시 mypage 화면으로 이동한다.</li></ul><p><strong>Login &#x2F; Sign up</strong></p><ul><li>Home 화면 상단의 오른쪽에 위치.</li><li>Sign 클릭시 회원가입 화면으로 이동한다.</li><li>회원가입에 필요한 Id, Password를 포함한 정보 기입 후, 회원가입 버튼을 클릭하여 가입한다.</li><li>회원가입에 실패하면 error message 송출한다.</li><li>Login 클릭시 로그인 화면으로 이동한다.</li><li>Id, Password 입력 후, 로그인 버튼 클릭으로 로그인한다.</li><li>로그인 실패시 error message 송출한다.</li><li>로그인에 성공하면 화면 오른쪽 상단의 Login 버튼이 Logout 으로 바뀐다.</li><li>Logout 클릭시 사이트에서 로그아웃 된다.</li></ul><p><strong>Market</strong></p><ul><li>게시글 리스트의 게시글 클릭시, 게시글의 상세 페이지로 이동한다.</li><li>게시글 리스트의 상단에 위치한 게시글 작성 버튼을 누르면 게시글 작성 화면으로 이동한다.</li><li>클라이언트는 서버에 NFT 정보를 요청하고 서버는 DB에 저장된 NFT 정보를 응답한다.</li><li>클라이언트는 응답받은 정보를 marketplace 페이지에 보여준다.</li><li>NFT 중 하나를 눌렀을 때 지갑연결이 되어있으면 구매 페이지로, 아니면 지갑 연결 페이지로 이동한다.</li></ul><p><strong>Create (NFT Create)</strong></p><ul><li><strong>지갑 연결 [URClass eth연결]</strong><ul><li>연결이 되지 않은 상황에오른쪽 위 지갑을 누르거나, 오른쪽 위 사용자를 누르거나, Explore에서 NFT를 눌렀을 때 이동한다.</li><li>지갑을 클릭하면 MetaMask 지갑을 표시한다.</li><li>지갑에 로그인하면 사이트에 로그인된다.</li></ul></li><li>사용자는 자신이 보유한 IC토큰을 인증하고, NFT 생성을 위해 Create 버튼을 눌러 create 화면으로 이동한다.</li><li>클라이언트는 사용자에게 NFT CreationFrom을 제공한다.</li><li>사용자는 이미지와 정보를 입력하고 Create NFT 버튼을 클릭하여 NFT 정보를 IPFS에 업로드 요청한다.</li><li>이미지를 IPFS에 저장 후 이미지 IPFS URI를 입력한 정보에 추가하여 metadata.json 파일을 IPFS에 업로드한다.</li><li>업로드 완료 후, 업로드된 이미지는 My Page의 Minted List에서 확인할 수 있다.</li></ul><p><strong>My Page</strong></p><ul><li>로그인한 사용자의 상세 정보 확인.</li><li>사용자가 보유한 IC토큰을 확인.</li><li>사용자가 보유한 NFT 조회.</li><li>구매한 NFT 목록 조회 &#x2F; 민팅한 NFT 목록 조회.</li><li>사용자가 작성한 게시글 확인.</li><li>사용자가 작성한 댓글 확인.</li></ul><p><strong>필수 구현</strong></p><ul><li>로그인 &#x2F; 로그아웃</li><li>회원가입</li><li>게시글 읽기 및 작성</li><li>게시글에 대한 댓글 작성</li><li>게시글의 작성자가 댓글 채택</li><li>채택된 댓글의 작성자는 보상으로 IC토큰을 받음</li><li>IC토큰을 민팅한 NFT 토큰으로 교환</li><li>NFT Create를 하면 데이터베이스에 저장</li><li>Minted List에서 데이터를 받아와서 보유 NFT 표시</li></ul><p><strong>추가 기능 구현</strong></p><ul><li>내 NFT 컬렉션 페이지 조회 기능.</li><li>사용자 NFT 페이지 조회 기능.</li><li>답변 채택이 완료된 게시글은 완료 리스트로 이동하기.</li><li>보유한 IC토큰과 NFT 전송 기능.</li><li>보유한 NFT 판매 기능.</li></ul><hr><h2 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h2><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/24256d43-e657-47b9-9861-10ce12de85e9/HALP_ME_Flowchart.drawio.final.png" alt="HALP ME Flowchart.drawio.final.png"></p><hr><h2 id="ER-Diagram"><a href="#ER-Diagram" class="headerlink" title="ER-Diagram"></a>ER-Diagram</h2><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc9c3c7f-c521-4367-9c3a-26f79fcdd409/Project2.png" alt="Project2.png"></p><hr><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><table><thead><tr><th>EndPoint</th><th>Description</th><th>METHOD</th><th>Parameters</th><th>res</th><th>비고</th></tr></thead><tbody><tr><td>“&#x2F;”</td><td>메인화면 필요 데이터</td><td>GET</td><td>X</td><td>{</td><td></td></tr><tr><td>message,</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>data {</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><pre><code>postId,title,contents,category,status,createdAt,updatedAt,id,User.nickname,</code></pre><p>  }<br>} |  |<br>| “api&#x2F;user-data” | 모든 유저 정보 | GET | X | {<br>  message,<br>  data {<br>    id,<br>    loginId,<br>    password,<br>    nickname,<br>    role,<br>    createdAt,<br>    updatedAt,<br>  }<br>} | 다음 커밋에서password 는 반환하지 않도록 할 예정 |<br>| “api&#x2F;user-data&#x2F;:id” | 특정 유저 정보 | GET | req.params [ id ] | 위와 동일 |  |<br>| “api&#x2F;post-data” | 모든 게시글 정보 | GET | X | {<br>  message,<br>  data {<br>    postId,<br>    title,<br>    contents,<br>    category,<br>    status,<br>    createdAt,<br>    updatedAt,<br>    id,<br>  }<br>} |  |<br>| “api&#x2F;post-data&#x2F;:id” | 특정 게시글 정보 | GET | req.params [ id ] | 위와 동일 | ⇒ 사용자별 게시글 정보 |<br>| “api&#x2F;wallet-data” | 모든 지갑 정보 | GET | X | {<br>  message<br>  data {<br>    address,<br>    balance,<br>    status,<br>    id,<br>  }<br>} |  |<br>| “api&#x2F;wallet-data&#x2F;:id” | 특정 지갑 정보 | GET | req.params [ id ] | 위와 동일 |  |<br>| “api&#x2F;nft-data” | 모든 nft 정보 | GET | X | {<br>  message<br>  data {<br>    tokenId,<br>    URI,<br>    price,<br>    status,<br>    createdAt,<br>    updatedAt,<br>    address,<br>  }<br>} |  |<br>| “api&#x2F;nft-data&#x2F;:address” | 특정 nft 정보 | GET | req.params [ address ] | 위와 동일 |  |<br>| “&#x2F;user&#x2F;signup” | 회원가입 | POST | req.body [ loginId, password, nickname ] | {<br>  message<br>} | 로그인 시에 userId 를 첨부할 예정 이를 통해 다른 api 를 이용 가능 |<br>| “&#x2F;action&#x2F;write&#x2F;post” | 게시글 작성 | POST | req.body [ title, contents, category ]<br>req.query [id] | {<br>  message<br>  “data”: {<br>    “status”<br>    “postId”<br>    “id”<br>    “title”<br>    “category”<br>    “contents”<br>    “updatedAt”<br>    “createdAt”<br>} |  |<br>| “&#x2F;user&#x2F;login” | 로그인 | POST | req.body [ loginId, password ] | {<br>  message<br>  data: {<br>    id,<br>    nickname,<br>    role<br>} |  |<br>| “&#x2F;action&#x2F;write&#x2F;comment&#x2F;:commentId” | 댓글 작성 | POST | req.body [ contents ],<br>req.params [ commentId ]<br>req.query [id] | {<br>“message”<br>  “data”: {<br>    “status”<br>    “commentId”<br>    “id”<br>    “postId”<br>    “contents”<br>    “updatedAt”<br>    “createdAt”<br>  }<br>} |  |<br>| &#x2F;api&#x2F;comment-data&#x2F;:postId | 특정 게시글의 댓글 조회 | GET | X | {<br>“message”<br>  “data”: {<br>    “status”<br>    “commentId”<br>    “id”<br>    “postId”<br>    “contents”<br>    “updatedAt”<br>    “createdAt”<br>  }<br>} |  |<br>| &#x2F;action&#x2F;comment&#x2F;select&#x2F;:commentId | 특정 댓글 채택 | POST | req.params [ commentId ]<br> | {<br>  message<br>  data : {<br>    1<br>  }<br>} | 추후 response 수정 예정 |<br>| &#x2F;action&#x2F;transfer&#x2F;token | 토큰 전송 | POST | req.query [from, id]<br>req.body [to, amount] | {<br>  message<br>} |  |</p><hr><h3 id="참고-레퍼런스"><a href="#참고-레퍼런스" class="headerlink" title="참고 레퍼런스"></a>참고 레퍼런스</h3>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> project </tag>
            
            <tag> codestates </tag>
            
            <tag> BEB05 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project1</title>
      <link href="/2022/08/16/project1/"/>
      <url>/2022/08/16/project1/</url>
      
        <content type="html"><![CDATA[<h1 id="UnderTheSea"><a href="#UnderTheSea" class="headerlink" title="UnderTheSea"></a>UnderTheSea</h1><h2 id="BEB-05-first-Project-Team-02"><a href="#BEB-05-first-Project-Team-02" class="headerlink" title="BEB 05 first Project Team 02"></a>BEB 05 first Project Team 02</h2><h2 id="팀-소개"><a href="#팀-소개" class="headerlink" title="팀 소개"></a>팀 소개</h2><h3 id="BEB-05-01-02조"><a href="#BEB-05-01-02조" class="headerlink" title="BEB-05-01-02조"></a>BEB-05-01-02조</h3><ul><li><strong>팀명 : UnderTheSea 언더더씨</strong></li><li><strong>팀장 : 김윤겸</strong></li><li><strong>팀원 : 박찬우, 서경근, 홍유진</strong></li><li>Site  Link :</li><li>Date : 2022&#x2F;08&#x2F;08 - 2022&#x2F;08&#x2F;16</li></ul><blockquote><p>➡️ <strong>프로젝트 목표</strong></p><h3 id="최대의-NFT-Marketplace-‘OpenSea’를-클론-코딩한-플랫폼-구현"><a href="#최대의-NFT-Marketplace-‘OpenSea’를-클론-코딩한-플랫폼-구현" class="headerlink" title="최대의 NFT Marketplace ‘OpenSea’를 클론 코딩한 플랫폼 구현."></a><strong>최대의 NFT Marketplace ‘OpenSea’를 클론 코딩한 플랫폼 구현.</strong></h3></blockquote><h3 id="역할-분담"><a href="#역할-분담" class="headerlink" title="역할 분담"></a>역할 분담</h3><table><thead><tr><th>이름</th><th>포지션</th></tr></thead><tbody><tr><td>김윤겸</td><td>BE, IPFS</td></tr><tr><td>서경근</td><td>BE</td></tr><tr><td>박찬우</td><td>FE</td></tr><tr><td>홍유진</td><td>FE</td></tr></tbody></table><h2 id="저장소"><a href="#저장소" class="headerlink" title="저장소"></a>저장소</h2><h3 id="팀-레포"><a href="#팀-레포" class="headerlink" title="팀 레포"></a>팀 레포</h3><p><a href="https://github.com/codestates/BEB-05-underthesea">https://github.com/codestates/BEB-05-underthesea</a></p><hr><h2 id="구현-기능"><a href="#구현-기능" class="headerlink" title="구현 기능"></a>구현 기능</h2><h3 id="기본-기능"><a href="#기본-기능" class="headerlink" title="기본 기능"></a>기본 기능</h3><ul><li><input disabled="" type="checkbox"> 사용자는 메타마스크 지갑을 연동하여 로그인 할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 자신이 소유한 nft 목록을 확인할 수 있다</li></ul><h3 id="주요-기능"><a href="#주요-기능" class="headerlink" title="주요 기능"></a>주요 기능</h3><ul><li><input disabled="" type="checkbox"> 사용자는 판매중인 nft 목록을 나열할 수 있다 → 조회 방식 선택(최근 날짜, 인기순, 가격 높은순)</li><li><input disabled="" type="checkbox"> 사용자는 nft의 상세 정보를 확인할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 nft를 생성 및 배포할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 자신의 거래 내역을 확인할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 민팅된 nft를 구매할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 구입한 nft를 판매할 수 있다</li></ul><h3 id="추가-기능"><a href="#추가-기능" class="headerlink" title="추가 기능"></a>추가 기능</h3><ul><li><input disabled="" type="checkbox"> 사용자는 소유한 nft를 전송할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 nft를 고정된 가격에 구매하거나 경매할 수 있다</li><li><input disabled="" type="checkbox"> 사용자는 카테고리의 Explore에서 nft 조회 방식을 선택할 수 있다</li></ul><hr><h2 id="시나리오"><a href="#시나리오" class="headerlink" title="시나리오"></a>시나리오</h2><p><strong>Home</strong></p><ul><li>기본 홈 화면</li><li>왼쪽 위 마크를 누르면 홈으로 이동한다.</li></ul><p><strong>Explore 및 검색</strong></p><ul><li>검색을 하거나 Explore를 누르면 marketplace로 이동한다.</li><li>클라이언트는 서버에 NFT 정보를 요청하고 서버는 DB에 저장된 NFT 정보를 응답한다.</li><li>클라이언트는 응답받은 정보를 marketplace 페이지에 보여준다.</li><li>NFT 중 하나를 눌렀을 때 지갑연결이 되어있으면 구매 페이지로, 아니면 지갑 연결 페이지로 이동한다.</li></ul><p><strong>지갑 연결</strong></p><ul><li>연결이 되지 않은 상황에오른쪽 위 지갑을 누르거나, 오른쪽 위 사용자를 누르거나, Explore에서 NFT를 눌렀을 때 이동한다.</li><li>지갑을 클릭하면 MetaMask 지갑을 표시한다.</li><li>지갑에 로그인하면 사이트에 로그인된다.</li></ul><p><strong>NFT 만들기</strong></p><ul><li>사용자가 Create 버튼을 눌렀을 때 이동한다.</li><li>클라이언트는 사용자에게 NFT CreationFrom을 제공한다.</li><li>사용자는 이미지와 정보를 입력하고 Create를 클릭한다.</li><li>이미지를 IPFS에 저장 후 이미지 IPFS URI를 입력한 정보에 추가하여 metadata.json 파일을 IPFS에 업로드한다. (-&gt;explore에서 보이게)</li></ul><p><strong>필수 구현</strong></p><ul><li>지갑 연결 로그인</li><li>marketplace에서 데이터 받아와 표시</li><li>NFT Create를 하면 데이터베이스에 저장</li></ul><p><strong>추가 기능 구현</strong></p><ul><li>내가 만든 NFT 컬렉션 페이지 조회</li><li>작가별 NFT 페이지 조회</li><li>market place 정렬 기능 (가격순, 최신순 등)</li></ul><hr><h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><h3 id="💻-Back-End"><a href="#💻-Back-End" class="headerlink" title="💻 Back End"></a>💻 Back End</h3><p><strong>[ 지갑 연결, 컨트랙트 발행, 기능 구현 ]</strong></p><ul><li><input disabled="" type="checkbox"> Project Setup</li><li><input disabled="" type="checkbox"> [Login &#x2F; Wallet] Connecting MetaMask</li><li><input disabled="" type="checkbox"> NFT contract 구현</li><li><input disabled="" type="checkbox"> Marketplace contract setup</li><li><input disabled="" type="checkbox"> Make Items 구현</li><li><input disabled="" type="checkbox"> Purchase Items 구현</li></ul><h3 id="💻-Front-End"><a href="#💻-Front-End" class="headerlink" title="💻 Front End"></a>💻 Front End</h3><p><strong>[ 개발 환경 구축]</strong></p><ul><li><input disabled="" type="checkbox"> Setup (starter kit)</li><li><input disabled="" type="checkbox"> MetaMask 네트워크에 Hardhat Node 추가</li><li><input disabled="" type="checkbox"> MetaMask 계정을 브라우저와 연결</li><li><input disabled="" type="checkbox"> Components 구성, 라이브러리 추가, Handler 추가, MetaMask 계정 연결을 위한 Hook 추가</li><li><input disabled="" type="checkbox"> 블록체인 연결, 컨트랙트 가져오기</li><li><input disabled="" type="checkbox"> Navbar Components 추가, Nav 구성 및 경로 설정</li><li><input disabled="" type="checkbox"> 지갑 연결 버튼 생성</li></ul><p><strong>[ Home Component ]</strong></p><ul><li><input disabled="" type="checkbox"> 마켓플레이스 nft 컨트랙트 가져오기</li><li><input disabled="" type="checkbox"> ipfs에서 nft 메타데이터 가져오기, API 연결</li><li><input disabled="" type="checkbox"> 판매 아이템 항목 생성</li><li><input disabled="" type="checkbox"> 구매 아이템 항목 생성</li><li><input disabled="" type="checkbox"> 판매되지 않은 아이템 사용자 구매</li><li><input disabled="" type="checkbox"> 항목 조회 완료 전 Loading Page</li><li><input disabled="" type="checkbox"> nft 상세정보(이미지와 이름, 가격, 설명) 맵핑 카드</li><li><input disabled="" type="checkbox"> 가격 단위 wei → eth로 변환</li><li><input disabled="" type="checkbox"> 보유 자산 항목 나열</li></ul><p><strong>[ Create Component ]</strong></p><ul><li><input disabled="" type="checkbox"> 새로 생성된 nft 메타데이터를 ipfs에 업로드</li><li><input disabled="" type="checkbox"> 블록체인에 저장할 nft 메타데이터 입력 양식 생성</li><li><input disabled="" type="checkbox"> 변경 사항을 ipfs에 업로드</li><li><input disabled="" type="checkbox"> 사용자가 생성할 nft 입력 양식 제출시 메타데이터를 ipfs에 업로드</li><li><input disabled="" type="checkbox"> ipfs로부터 민팅된 항목으로 리스트 생성</li><li><input disabled="" type="checkbox"> Home 화면 수정 및 UI 구축</li></ul><p><strong>[ MyListedItems Component ]</strong></p><ul><li><input disabled="" type="checkbox"> 사용자의 nft 리스트 나열</li><li><input disabled="" type="checkbox"> 판매된 nft는 SoldItems로 이동</li><li><input disabled="" type="checkbox"> Home 화면 수정 및 UI 구축</li></ul><p><strong>[ MyPurchases Component ]</strong></p><ul><li><input disabled="" type="checkbox"> 구매한 nft를 MyPurchases로 이동</li><li><input disabled="" type="checkbox"> 사용자가 구매한 아이템 항목 생성</li><li><input disabled="" type="checkbox"> 마켓플레이스의 항목 계정으로 필터링</li><li><input disabled="" type="checkbox"> 구매한 아이템의 메타데이타를 구매 항목 리스트에 업로드</li><li><input disabled="" type="checkbox"> Home 화면 수정 및 UI 구축</li></ul><hr><h3 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h3><p><img src="https://user-images.githubusercontent.com/99964401/184828609-5bbb5b79-2f2d-4819-96b6-e8f41d8e45ea.png" alt="UnderTheSea Flowchart drawio"></p><hr><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ol><li>git clone </li><li>npm install</li><li>npm start</li></ol><hr><h2 id="프로젝트-회고"><a href="#프로젝트-회고" class="headerlink" title="프로젝트 회고"></a>프로젝트 회고</h2><h3 id="느낀점"><a href="#느낀점" class="headerlink" title="느낀점"></a>느낀점</h3><p>첫 프로젝트는 툴 사용법과 프로젝트 프로세스를 갖추는 과정이 제일 오래 걸렸다.<br>초반에는 어떤식으로 시작해야하는지 우왕좌왕했다.<br>갑자기 벌거벗겨진채로 무인도에 내던져진 문명의 사람같았다.<br>프로젝트 이전에 가장 고민됐던 것이 팀에 도움이 되는 팀원이 될 수 있을까였다.<br>그래서 기를 쓰고 툴을 사용하는 것에 열심히 매달렸던것 같다.<br>첫 날 가장 오랜 시간을 쓰고 당황했던 점을 보완한다면 나의 역할을 완벽하지는 않아도 팀원의 역할은 할 수 있을 것 같았다.<br>찬찬히 일을 분담을 하고 팀원들과 소통을 하면서 안정적이구만…! 싶을 때 위기는 찾아왔다.<br>ipfs에 업로드 하는 infura 이슈로 사용하기로 했ㅓ infura를 nft Storage로 바꿔야 했다.<br>이 과정이 제일 어렵고 고난이었다.<br>여러모로 아쉬운 점이 많았지만, 배운 것도 많았다.<br>팀원들과 같이 어려움을 이겨나가는 것 또한 능력이라는 것?ㅎㅎ<br>아무튼 다들 고생하셨고, 나름 즐거웠던 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> project </tag>
            
            <tag> codestates </tag>
            
            <tag> BEB05 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2022/07/13/test1/"/>
      <url>/2022/07/13/test1/</url>
      
        <content type="html"><![CDATA[<h2 id="이미지-업로드-테스트"><a href="#이미지-업로드-테스트" class="headerlink" title="이미지 업로드 테스트"></a>이미지 업로드 테스트</h2><p><img src="/image/Section_1_HTML_CSS/1.png" alt="Untitled"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beb_05_day15</title>
      <link href="/2022/05/18/beb-05-day15/"/>
      <url>/2022/05/18/beb-05-day15/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-Node-js-모듈-사용-x2F-Fetch-네트워크-요청"><a href="#Section-1-Node-js-모듈-사용-x2F-Fetch-네트워크-요청" class="headerlink" title="Section 1: Node.js 모듈 사용 &#x2F; Fetch 네트워크 요청"></a>Section 1: Node.js 모듈 사용 &#x2F; Fetch 네트워크 요청</h1><h1 id="220518-JS-x2F-Node-비동기-2"><a href="#220518-JS-x2F-Node-비동기-2" class="headerlink" title="220518 - [JS&#x2F;Node] 비동기 2"></a>220518 - [JS&#x2F;Node] 비동기 2</h1><hr><h1 id="Node-js-모듈-사용법"><a href="#Node-js-모듈-사용법" class="headerlink" title="Node.js 모듈 사용법"></a>Node.js 모듈 사용법</h1><p>브라우저에서 사용할 수 있는 비동기 흐름은 타이머 혹은 DOM 이벤트와 관련된 상황으로 다소 한정적.</p><p>BUT!</p><p>Node.js의 경우 많은 API가 비동기로 작성됨.</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js ?"></a>Node.js ?</h2><p>로컬 환경에서 자바스크립트를 실행할 수 있는 자바스크립트 런타임이다. 브라우저에서 불가능한 기능이 가능.</p><blockquote><p><strong>모듈 ?</strong> 어떤 기능을 조립할 수 있는 형태로 만든 부분. fs(File System) 모듈은 PC의 파일을 읽거나 저장하는 일을 지원함.</p></blockquote><p>서버사이트 스크립트 언어가 아닌 프로그램(환경)이다.</p><p>웹서버와 같이 확장성 있는 네트워크 프로그램 제작을 위해 만들어졌다. ⇒ 한가지 언어로 전체 웹 페이지를 만들 수 있게 됨. </p><h3 id="Node-js의-특징"><a href="#Node-js의-특징" class="headerlink" title="Node.js의 특징"></a>Node.js의 특징</h3><ul><li>자바스크립트 언어 사용</li><li>자바스크립트 엔진 사용으로 속도가 빠르다</li><li>이벤트 기반 비동기 방식(Non-Blocking)<ul><li>Node.js 에서 모든 API가 비동기 방식이므로, 호출 후 응답을 기다리지 않고 다른 API를 호출. 이전에 호출한 API의 응답이 오면 이벤트 루프가 확인하여 처리함.</li><li>이벤트 루프(event loop)는 여러 이벤트가 동시 발생했을 때 어떤 순서로 콜백함수를 호출할지 판단.</li><li>비동기란 이전 작업이 완료될 때까지 대기하지 않고 동시에 작업을 수행하는 것.</li></ul></li><li>단일 스레드<ul><li>스레드 : 프로세스 내에서 실행되는 흐름의 단위. 프로세스는 스레드를 여러 개 생성하여 여러 작업을 동시에 처리. 스레드들은 부모 프로세스의 자원을 공유. 같은 주소의 메모리에 접근 가능하여 데이터 공유할 수 있다.</li><li>프로세스 : 운영체제에서 할당하는 작업의 단위. 노드나 웹 브라우저 등의 프로그램은 개별적인 프로세스. 프로세스 간 메모리 자원 공유 x.</li><li>복잡한 비동기 I&#x2F;O 응용 프로그램을 싱글 스레드 자바스크립트로 작성하여 결과물 실행 속도와 개발 편의성이 좋음. 그러나 CPU의 높은 연산력을 요구하는 프로그램을 짜면 성능이 좋지 않음.</li></ul></li></ul><hr><h2 id="Node-js-내장-모듈-사용-방법"><a href="#Node-js-내장-모듈-사용-방법" class="headerlink" title="Node.js 내장 모듈 사용 방법"></a>Node.js 내장 모듈 사용 방법</h2><p><a href="https://nodejs.org/dist/latest-v14.x/docs/api/">[Node.js 내장 모듈 목록]</a></p><ul><li>DNS 모듈 사용법 :</li></ul><p><a href="https://nodejs.org/dist/latest-v12.x/docs/api/dns.html">DNS | Node.js v18.2.0 Documentation</a></p><ul><li><a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html">파일 시스템 모듈</a> → 파일을 읽거나 저장하는 기능을 구현하도록 돕는 메소드</li><li>파일 읽을 때  적합한 메소드 → <a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_fs_readfile_path_options_callback">readFile</a></li><li>파일 저장할 때 적합한 메소드 → <a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_fs_writefile_file_data_options_callback">writeFile</a></li></ul><h2 id="모듈을-사용하기-위해-불러오는-과정"><a href="#모듈을-사용하기-위해-불러오는-과정" class="headerlink" title="모듈을 사용하기 위해 불러오는 과정"></a>모듈을 사용하기 위해 불러오는 과정</h2><h3 id="Node-js-에서-다른-파일을-불러오기-위한-require-구문"><a href="#Node-js-에서-다른-파일을-불러오기-위한-require-구문" class="headerlink" title="Node.js 에서 다른 파일을 불러오기 위한 require 구문"></a>Node.js 에서 다른 파일을 불러오기 위한 require 구문</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자바스크립트 코드 가장 상단에 require 구문 이용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 파일 시스템 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">&#x27;dns&#x27;</span>); <span class="comment">// DNS 모듈 불러오기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.readFile 메소드 등을 사용할 수 있음</span></span><br></pre></td></tr></table></figure><h3 id="3rd-party-모듈-사용하는-방법"><a href="#3rd-party-모듈-사용하는-방법" class="headerlink" title="3rd-party 모듈 사용하는 방법"></a>3rd-party 모듈 사용하는 방법</h3><p>**써드 파티 모듈(3rd-party module)**은 해당 프로그래밍 언어에서 공식적으로 제공하는 빌트인 모듈이 아닌 모든 <strong>외부 모듈</strong>을 말한다. </p><p>ex) Node.js에서 underscore는 Node.js 공식문서에 없는 모듈이기 때문에 써드 파티 모듈이라고 할 수 있음.</p><p>⇒ <strong>써드 파티 모듈을 다운</strong> 받기 위해 터미널에서 <strong>npm을 사용</strong>해야 함</p><p><strong>[ 터미널에서 underscore 모듈 설치하기 ]</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install underscore</span><br></pre></td></tr></table></figure><p>⇒ node_modules에 underscore 설치한 후, </p><p>Node.js 내장 모듈을 사용하듯 <strong>require 구문</strong>을 사용해 underscore을 사용할 수 있음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node.js의 3rd-party 모듈인 &#x27;underscore&#x27;사용</span></span><br></pre></td></tr></table></figure><hr><h2 id="fs-readFile-path-options-callback"><a href="#fs-readFile-path-options-callback" class="headerlink" title="fs.readFile(path, [options], callback)"></a>fs.readFile(path, [options], callback)</h2><p>메소드 fs.readFile은 비동기적으로 파일 내용 전체를 읽는다. 로컬에 존재하는 파일을 읽어온다. 이 메소드는 실행할 때 인자 세 개를 넘길 수 있다.</p><ul><li><strong>path</strong> → &lt;string&gt;, &lt;Buffer&gt;, &lt;URL&gt;, &lt;integer&gt;<ul><li>path 에는 파일 이름을 인자로 넘길 수 있다. 위의 네가지 종류 타입을 넘길 수 있지만 일반적으로는 문자열 타입으로 넘김</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /ect/passwd 파일을 불러오는 예제</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, ..., ...)</span><br></pre></td></tr></table></figure><ul><li><strong>options</strong> → &lt;Object&gt;, &lt;string&gt;<ul><li>대괄호로 감싼 두번째 인자 options는 선택적으로 넣거나 생략할 수 있는 인자.</li><li>객체 형태 또는 문자열 타입으로 넘길 수 있다. 문자열의 경우 인코딩을 넘긴다.</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line"><span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> <span class="comment">// UTF-8 인코딩 방식으로 열기</span></span><br><span class="line"><span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span> <span class="comment">// 읽기 위해 열기</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 옵션을 사용하여 passwd 파일을 읽는다</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, options, ...)</span><br></pre></td></tr></table></figure><ul><li><strong>callback</strong> → &lt;Function&gt;<ul><li><strong>err</strong> → \ <Error></li><li><strong>data</strong> → &lt;string&gt; , &lt;Buffer&gt;<ul><li>콜백 함수를 전달한다. 파일을 읽은 후에 비동기적으로 실행되는 함수.</li><li>두 가지 파라미터가 존재한다. 에러가 발생하지 않으면 err ⇒ null 이 되고, data 에 문자열이너 Buffer 라는 객체가 전달된다. (data는 파일의 내용)</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.readeFile 메소드로 파일의 데이터를 읽어 들인다</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err; <span class="comment">// 에러를 던짐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="fetch를-이용한-네트워크-요청"><a href="#fetch를-이용한-네트워크-요청" class="headerlink" title="fetch를 이용한 네트워크 요청"></a>fetch를 이용한 네트워크 요청</h1><p>비동기 요청의 가장 대표적인 사례는 <strong>네트워크 요청</strong>이다. 네트워크를 통해 이뤄지는 요청은 형태가 다양하며 URL로 요청하는 경우가 가장 흔함.  </p><p>⇒ <strong>URL 요청</strong>을 가능하게 해주는 API가 <strong>fetch API</strong>이다.</p><p>포털사이트는 <strong>변하는 정보</strong>와 <strong>고정적인 정보</strong>가 따로 분리된 구성이다. <strong>최신 뉴스나 날씨 정보 등 동적으로 데이터를 받아와야 하는 정보</strong>는 해당 정보만 업데이트하기 위해 요청 API를 이용한다. 그 중 대표적인 <strong>fetch API</strong>를 이용해 <strong>해당 정보를 원격 URL로부터 불러오는 경우</strong>, <strong>원격 URL로부터 정보를 받아</strong>와서 <strong>DOM 엘리먼트를 업데이트</strong> 한다.</p><p>→ <strong>URL에 요청</strong>을 보내고 <strong>필요한 정보</strong>를 받아온다.</p><p><strong>fetch API는  특정 URL로부터 정보를 받아오는 역할</strong>을 하는데, 이 과정이 <strong>비동기</strong>로 이루어져 다소 시간이 걸릴 수 있다. 시간이 소요되는 작업을 요구할 경우에는 blocking이 발생하면 안되므로 DOM에 정보가 표시될 때 까지 로딩 창을 대신 띄우는 경우도 있다.</p><h2 id="fetch-API-사용법"><a href="#fetch-API-사용법" class="headerlink" title="fetch API 사용법"></a>fetch API 사용법</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch API는 Promise의 형식으로 이루어져 있음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;---주소---&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 자체적으로 json() 메소드가 있어, 응답을 JSON 형태로 변환시킨 후 다음 Promise로 전달</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json)) <span class="comment">// 콘솔에 json을 출력</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error)); <span class="comment">// 에러가 발생한 경우, 에러를 띄운다</span></span><br></pre></td></tr></table></figure><p>→ 자세한 내용 : <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">MDN</a> 참고</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beb_05_day14</title>
      <link href="/2022/05/18/beb-05-day14/"/>
      <url>/2022/05/18/beb-05-day14/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-비동기-UnderBar-라이브러리"><a href="#Section-1-비동기-UnderBar-라이브러리" class="headerlink" title="Section 1: 비동기 - UnderBar 라이브러리"></a>Section 1: 비동기 - UnderBar 라이브러리</h1><h1 id="220517-JS-x2F-Node-비동기"><a href="#220517-JS-x2F-Node-비동기" class="headerlink" title="220517 - [JS&#x2F;Node] 비동기"></a>220517 - [JS&#x2F;Node] 비동기</h1><aside>💡 비동기 흐름은 callback, promsie, async/await 중 하나의 문법을 이용해 구현 가능.</aside><h3 id="Achievement-Goals"><a href="#Achievement-Goals" class="headerlink" title="Achievement Goals"></a>Achievement Goals</h3><ul><li>어떤 경우에 중첩된 callback이 발생하는지 이해</li><li>중첩된 callback의 단점과 Promise의 장점 이해</li><li>Promise 사용 패턴을 이해<ul><li>resolve, reject의 의미 &#x2F; then, catch와의 관계 이해</li><li>Promise에서 인자를 넘기는 방법</li><li>Promise.all 의 사용법</li></ul></li><li>async &#x2F; await : keyword에 대해 이해 및 작동 원리 이해</li><li>Node.js의 fs 모듈 사용법을 이해</li></ul><hr><h1 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h1><h2 id="비동기의-이해"><a href="#비동기의-이해" class="headerlink" title="비동기의 이해"></a>비동기의 이해</h2><p>커피숍에서 먼저 주문한 손님1이 커피를 받을 때까지, 줄 서 있는 손님2는 주문 불가능</p><p>→ <strong>blocking</strong> : 하나의 작업이 끝날 때까지, 이어지는 작업을 “막기”</p><p>손님2는 손님1의 커피가 나온 후, 주문 가능 → <strong>손님1의 주문 완료 시점 &#x3D; 손님2의 주문 시작 시점</strong></p><p>→ <strong>동기적(synchronous)</strong> : 작업의 시작 시점과 완료 시점이 같은 상황</p><p>주문 과정을 효율적으로 변경하기</p><ul><li>커피 주문이 blocking 되지 않고, 언제든지 주문을 받을 수 있게 한다.</li><li>커피가 완성되면 즉시 제공 : 손님1의 주문 완료 시점과 손님2의 주문 시작 시점이 같지 않아도 됨</li></ul><p>→ 이러한 합리적인 대안으로 Node.js를 non-blocking하고 비동기적(asynchronous)으로 작동하는 런타임으로 개발함.</p><p>JavaScript의 비동기적 실행(Asynchonous execution)이라는 개념은 웹 개발에서 유용</p><ul><li>백그라운드 실행, 로딩 창 등의 작업</li><li>인터넷에서 서버로 요청, 응담을 기다리는 작업</li><li>큰 용량의 파일을 로딩하는 작업</li></ul><p>⇒ 비동기적으로 작동되었을 때 효율적인 작업들</p><hr><h2 id="고차함수와-Callback"><a href="#고차함수와-Callback" class="headerlink" title="고차함수와 Callback"></a>고차함수와 Callback</h2><p>[고차함수, Higher order function]</p><ul><li><p>다른 함수를 인자로 전달받을 수 있음</p></li><li><p>다른 함수를 리턴할 수 있음</p></li><li><p>함수를 리턴하는 함수, 함수를 인자로 받는 함수 ⇒ 고차함수</p></li><li><p>고차함수는 콜백 함수와 커리 함수의 상위 개념</p><p>  콜백 함수를 전달받은 caller 함수 &#x3D; 함수 내부에서 이 콜백 함수를 호출(invoke) 가능</p></li></ul><hr><h1 id="UnderBar"><a href="#UnderBar" class="headerlink" title="UnderBar"></a>UnderBar</h1><p>: 배열, 객체를 다루는 라이브러리.</p><p> underbar 라이브러리를 구현하며 자바스크립트 내장 메소드가 어떻게 callback 함수를 활용하는지 원리 이해하기.</p><p>모티브가 되는 라이브러리로 <a href="https://underscorejs.org/">underscore.js</a>, <a href="https://lodash.com/">lodash</a> 등</p><hr><h3 id="자바스크립트-배열-내장-메소드-forEach-x2F-map-x2F-filter-x2F-reduce"><a href="#자바스크립트-배열-내장-메소드-forEach-x2F-map-x2F-filter-x2F-reduce" class="headerlink" title="# 자바스크립트 배열 내장 메소드 [forEach &#x2F; map &#x2F; filter &#x2F; reduce ]"></a># 자바스크립트 배열 내장 메소드 [forEach &#x2F; map &#x2F; filter &#x2F; reduce ]</h3><ul><li>forEach : 배열의 각 요소들을 개별적으로 반환</li><li>map : 모든 요소에게 동일한 행동 후 다시 반환</li><li>filter : 모든 요소 중 조건에 맞는 값들만 반환</li><li>reduce : 전달된 초기값을 기준으로 누적시켜 새로운 값 반환</li></ul><h3 id="callback-함수를-전달하여-사용"><a href="#callback-함수를-전달하여-사용" class="headerlink" title="# callback 함수를 전달하여 사용"></a># callback 함수를 전달하여 사용</h3><p>값으로 전달된 함수는 내부적으로 호출될 수 있기 때문에, 원래 함수의 기본적인 동작 방법을 변경할 숭 있다.</p><p>함수가 다른 함수의 인자로 사용되어 그 함수의 내용을 바꿀 수 있는 것이 콜백(callback)함수.</p><p>콜백이 비동기처리에서 사용될 때, 시간이 오래 걸리는 작업이 완료된 후에 처리해야 할 일을 콜백으로 지정하면 해당 작업이 끝났을 때 미리 등록한 작업을 실행하도록 할 수 있다.</p><h3 id="closure-함수를-리턴하여-활용"><a href="#closure-함수를-리턴하여-활용" class="headerlink" title="# closure 함수를 리턴하여 활용"></a># closure 함수를 리턴하여 활용</h3><p>내부함수가 외부함수의 내용에 접근할 수 있는 개념이다.</p><p>외부함수의 실행이 종료되어 외부함수가 소멸된 이후에도 외부함수의 범위(scope)에 접근할 수 있는 내부함수.</p><p>⇒ 자바스크립트에서 함수가 값으로 취급되어 함수를 parameter로도 받을 수 있고 [→Callback], return 할 수도 있다[→Closure].</p><h3 id="…-Spread-Syntax-를-사용하여-인자의-개수-파악-및-인자에-접근"><a href="#…-Spread-Syntax-를-사용하여-인자의-개수-파악-및-인자에-접근" class="headerlink" title="# …(Spread Syntax)를 사용하여 인자의 개수 파악 및 인자에 접근"></a># …(Spread Syntax)를 사용하여 인자의 개수 파악 및 인자에 접근</h3><ul><li>rest parameter : 개별의 요소들을 하나의 배열로 묶기 위해 사용<ul><li>매개변수 앞에 점 …을 붙여서 정의한 매개변수 ⇒ 묶인 요소들의 타입은 ‘배열’로 출력</li></ul></li><li>spread syntax : 하나의 요소를 개별의 요소들로 펼치기 위해 사용<ul><li>배열, 문자열, 객체 등 Iterable Object를 각각의 요소로 펼칠 수 있다.</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/29/hello-world/"/>
      <url>/2022/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
