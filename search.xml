<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>beb05-3-3</title>
      <link href="/2022/06/27/beb05-3-3/"/>
      <url>/2022/06/27/beb05-3-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beb05-3-2</title>
      <link href="/2022/06/27/beb05-3-2/"/>
      <url>/2022/06/27/beb05-3-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/21/hello-world/"/>
      <url>/2022/05/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beb_05_day15</title>
      <link href="/2022/05/18/beb-05-day15/"/>
      <url>/2022/05/18/beb-05-day15/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-Node-js-모듈-사용-x2F-Fetch-네트워크-요청"><a href="#Section-1-Node-js-모듈-사용-x2F-Fetch-네트워크-요청" class="headerlink" title="Section 1: Node.js 모듈 사용 &#x2F; Fetch 네트워크 요청"></a>Section 1: Node.js 모듈 사용 &#x2F; Fetch 네트워크 요청</h1><h1 id="220518-JS-x2F-Node-비동기-2"><a href="#220518-JS-x2F-Node-비동기-2" class="headerlink" title="220518 - [JS&#x2F;Node] 비동기 2"></a>220518 - [JS&#x2F;Node] 비동기 2</h1><hr><h1 id="Node-js-모듈-사용법"><a href="#Node-js-모듈-사용법" class="headerlink" title="Node.js 모듈 사용법"></a>Node.js 모듈 사용법</h1><p>브라우저에서 사용할 수 있는 비동기 흐름은 타이머 혹은 DOM 이벤트와 관련된 상황으로 다소 한정적.</p><p>BUT!</p><p>Node.js의 경우 많은 API가 비동기로 작성됨.</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js ?"></a>Node.js ?</h2><p>로컬 환경에서 자바스크립트를 실행할 수 있는 자바스크립트 런타임이다. 브라우저에서 불가능한 기능이 가능.</p><blockquote><p><strong>모듈 ?</strong> 어떤 기능을 조립할 수 있는 형태로 만든 부분. fs(File System) 모듈은 PC의 파일을 읽거나 저장하는 일을 지원함.</p></blockquote><p>서버사이트 스크립트 언어가 아닌 프로그램(환경)이다.</p><p>웹서버와 같이 확장성 있는 네트워크 프로그램 제작을 위해 만들어졌다. ⇒ 한가지 언어로 전체 웹 페이지를 만들 수 있게 됨. </p><h3 id="Node-js의-특징"><a href="#Node-js의-특징" class="headerlink" title="Node.js의 특징"></a>Node.js의 특징</h3><ul><li>자바스크립트 언어 사용</li><li>자바스크립트 엔진 사용으로 속도가 빠르다</li><li>이벤트 기반 비동기 방식(Non-Blocking)<ul><li>Node.js 에서 모든 API가 비동기 방식이므로, 호출 후 응답을 기다리지 않고 다른 API를 호출. 이전에 호출한 API의 응답이 오면 이벤트 루프가 확인하여 처리함.</li><li>이벤트 루프(event loop)는 여러 이벤트가 동시 발생했을 때 어떤 순서로 콜백함수를 호출할지 판단.</li><li>비동기란 이전 작업이 완료될 때까지 대기하지 않고 동시에 작업을 수행하는 것.</li></ul></li><li>단일 스레드<ul><li>스레드 : 프로세스 내에서 실행되는 흐름의 단위. 프로세스는 스레드를 여러 개 생성하여 여러 작업을 동시에 처리. 스레드들은 부모 프로세스의 자원을 공유. 같은 주소의 메모리에 접근 가능하여 데이터 공유할 수 있다.</li><li>프로세스 : 운영체제에서 할당하는 작업의 단위. 노드나 웹 브라우저 등의 프로그램은 개별적인 프로세스. 프로세스 간 메모리 자원 공유 x.</li><li>복잡한 비동기 I&#x2F;O 응용 프로그램을 싱글 스레드 자바스크립트로 작성하여 결과물 실행 속도와 개발 편의성이 좋음. 그러나 CPU의 높은 연산력을 요구하는 프로그램을 짜면 성능이 좋지 않음.</li></ul></li></ul><hr><h2 id="Node-js-내장-모듈-사용-방법"><a href="#Node-js-내장-모듈-사용-방법" class="headerlink" title="Node.js 내장 모듈 사용 방법"></a>Node.js 내장 모듈 사용 방법</h2><p><a href="https://nodejs.org/dist/latest-v14.x/docs/api/">[Node.js 내장 모듈 목록]</a></p><ul><li>DNS 모듈 사용법 :</li></ul><p><a href="https://nodejs.org/dist/latest-v12.x/docs/api/dns.html">DNS | Node.js v18.2.0 Documentation</a></p><ul><li><a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html">파일 시스템 모듈</a> → 파일을 읽거나 저장하는 기능을 구현하도록 돕는 메소드</li><li>파일 읽을 때  적합한 메소드 → <a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_fs_readfile_path_options_callback">readFile</a></li><li>파일 저장할 때 적합한 메소드 → <a href="https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_fs_writefile_file_data_options_callback">writeFile</a></li></ul><h2 id="모듈을-사용하기-위해-불러오는-과정"><a href="#모듈을-사용하기-위해-불러오는-과정" class="headerlink" title="모듈을 사용하기 위해 불러오는 과정"></a>모듈을 사용하기 위해 불러오는 과정</h2><h3 id="Node-js-에서-다른-파일을-불러오기-위한-require-구문"><a href="#Node-js-에서-다른-파일을-불러오기-위한-require-구문" class="headerlink" title="Node.js 에서 다른 파일을 불러오기 위한 require 구문"></a>Node.js 에서 다른 파일을 불러오기 위한 require 구문</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자바스크립트 코드 가장 상단에 require 구문 이용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 파일 시스템 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">&#x27;dns&#x27;</span>); <span class="comment">// DNS 모듈 불러오기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.readFile 메소드 등을 사용할 수 있음</span></span><br></pre></td></tr></table></figure><h3 id="3rd-party-모듈-사용하는-방법"><a href="#3rd-party-모듈-사용하는-방법" class="headerlink" title="3rd-party 모듈 사용하는 방법"></a>3rd-party 모듈 사용하는 방법</h3><p>**써드 파티 모듈(3rd-party module)**은 해당 프로그래밍 언어에서 공식적으로 제공하는 빌트인 모듈이 아닌 모든 <strong>외부 모듈</strong>을 말한다. </p><p>ex) Node.js에서 underscore는 Node.js 공식문서에 없는 모듈이기 때문에 써드 파티 모듈이라고 할 수 있음.</p><p>⇒ <strong>써드 파티 모듈을 다운</strong> 받기 위해 터미널에서 <strong>npm을 사용</strong>해야 함</p><p><strong>[ 터미널에서 underscore 모듈 설치하기 ]</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install underscore</span><br></pre></td></tr></table></figure><p>⇒ node_modules에 underscore 설치한 후, </p><p>Node.js 내장 모듈을 사용하듯 <strong>require 구문</strong>을 사용해 underscore을 사용할 수 있음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node.js의 3rd-party 모듈인 &#x27;underscore&#x27;사용</span></span><br></pre></td></tr></table></figure><hr><h2 id="fs-readFile-path-options-callback"><a href="#fs-readFile-path-options-callback" class="headerlink" title="fs.readFile(path, [options], callback)"></a>fs.readFile(path, [options], callback)</h2><p>메소드 fs.readFile은 비동기적으로 파일 내용 전체를 읽는다. 로컬에 존재하는 파일을 읽어온다. 이 메소드는 실행할 때 인자 세 개를 넘길 수 있다.</p><ul><li><strong>path</strong> → &lt;string&gt;, &lt;Buffer&gt;, &lt;URL&gt;, &lt;integer&gt;<ul><li>path 에는 파일 이름을 인자로 넘길 수 있다. 위의 네가지 종류 타입을 넘길 수 있지만 일반적으로는 문자열 타입으로 넘김</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /ect/passwd 파일을 불러오는 예제</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, ..., ...)</span><br></pre></td></tr></table></figure><ul><li><strong>options</strong> → &lt;Object&gt;, &lt;string&gt;<ul><li>대괄호로 감싼 두번째 인자 options는 선택적으로 넣거나 생략할 수 있는 인자.</li><li>객체 형태 또는 문자열 타입으로 넘길 수 있다. 문자열의 경우 인코딩을 넘긴다.</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line"><span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> <span class="comment">// UTF-8 인코딩 방식으로 열기</span></span><br><span class="line"><span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span> <span class="comment">// 읽기 위해 열기</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 옵션을 사용하여 passwd 파일을 읽는다</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, options, ...)</span><br></pre></td></tr></table></figure><ul><li><strong>callback</strong> → &lt;Function&gt;<ul><li><strong>err</strong> → \ <Error></li><li><strong>data</strong> → &lt;string&gt; , &lt;Buffer&gt;<ul><li>콜백 함수를 전달한다. 파일을 읽은 후에 비동기적으로 실행되는 함수.</li><li>두 가지 파라미터가 존재한다. 에러가 발생하지 않으면 err ⇒ null 이 되고, data 에 문자열이너 Buffer 라는 객체가 전달된다. (data는 파일의 내용)</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.readeFile 메소드로 파일의 데이터를 읽어 들인다</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err; <span class="comment">// 에러를 던짐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="fetch를-이용한-네트워크-요청"><a href="#fetch를-이용한-네트워크-요청" class="headerlink" title="fetch를 이용한 네트워크 요청"></a>fetch를 이용한 네트워크 요청</h1><p>비동기 요청의 가장 대표적인 사례는 <strong>네트워크 요청</strong>이다. 네트워크를 통해 이뤄지는 요청은 형태가 다양하며 URL로 요청하는 경우가 가장 흔함.  </p><p>⇒ <strong>URL 요청</strong>을 가능하게 해주는 API가 <strong>fetch API</strong>이다.</p><p>포털사이트는 <strong>변하는 정보</strong>와 <strong>고정적인 정보</strong>가 따로 분리된 구성이다. <strong>최신 뉴스나 날씨 정보 등 동적으로 데이터를 받아와야 하는 정보</strong>는 해당 정보만 업데이트하기 위해 요청 API를 이용한다. 그 중 대표적인 <strong>fetch API</strong>를 이용해 <strong>해당 정보를 원격 URL로부터 불러오는 경우</strong>, <strong>원격 URL로부터 정보를 받아</strong>와서 <strong>DOM 엘리먼트를 업데이트</strong> 한다.</p><p>→ <strong>URL에 요청</strong>을 보내고 <strong>필요한 정보</strong>를 받아온다.</p><p><strong>fetch API는  특정 URL로부터 정보를 받아오는 역할</strong>을 하는데, 이 과정이 <strong>비동기</strong>로 이루어져 다소 시간이 걸릴 수 있다. 시간이 소요되는 작업을 요구할 경우에는 blocking이 발생하면 안되므로 DOM에 정보가 표시될 때 까지 로딩 창을 대신 띄우는 경우도 있다.</p><h2 id="fetch-API-사용법"><a href="#fetch-API-사용법" class="headerlink" title="fetch API 사용법"></a>fetch API 사용법</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch API는 Promise의 형식으로 이루어져 있음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;---주소---&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 자체적으로 json() 메소드가 있어, 응답을 JSON 형태로 변환시킨 후 다음 Promise로 전달</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json)) <span class="comment">// 콘솔에 json을 출력</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error)); <span class="comment">// 에러가 발생한 경우, 에러를 띄운다</span></span><br></pre></td></tr></table></figure><p>→ 자세한 내용 : <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">MDN</a> 참고</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>beb_05_day14</title>
      <link href="/2022/05/18/beb-05-day14/"/>
      <url>/2022/05/18/beb-05-day14/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-비동기-UnderBar-라이브러리"><a href="#Section-1-비동기-UnderBar-라이브러리" class="headerlink" title="Section 1: 비동기 - UnderBar 라이브러리"></a>Section 1: 비동기 - UnderBar 라이브러리</h1><h1 id="220517-JS-x2F-Node-비동기"><a href="#220517-JS-x2F-Node-비동기" class="headerlink" title="220517 - [JS&#x2F;Node] 비동기"></a>220517 - [JS&#x2F;Node] 비동기</h1><aside>💡 비동기 흐름은 callback, promsie, async/await 중 하나의 문법을 이용해 구현 가능.</aside><h3 id="Achievement-Goals"><a href="#Achievement-Goals" class="headerlink" title="Achievement Goals"></a>Achievement Goals</h3><ul><li>어떤 경우에 중첩된 callback이 발생하는지 이해</li><li>중첩된 callback의 단점과 Promise의 장점 이해</li><li>Promise 사용 패턴을 이해<ul><li>resolve, reject의 의미 &#x2F; then, catch와의 관계 이해</li><li>Promise에서 인자를 넘기는 방법</li><li>Promise.all 의 사용법</li></ul></li><li>async &#x2F; await : keyword에 대해 이해 및 작동 원리 이해</li><li>Node.js의 fs 모듈 사용법을 이해</li></ul><hr><h1 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h1><h2 id="비동기의-이해"><a href="#비동기의-이해" class="headerlink" title="비동기의 이해"></a>비동기의 이해</h2><p>커피숍에서 먼저 주문한 손님1이 커피를 받을 때까지, 줄 서 있는 손님2는 주문 불가능</p><p>→ <strong>blocking</strong> : 하나의 작업이 끝날 때까지, 이어지는 작업을 “막기”</p><p>손님2는 손님1의 커피가 나온 후, 주문 가능 → <strong>손님1의 주문 완료 시점 &#x3D; 손님2의 주문 시작 시점</strong></p><p>→ <strong>동기적(synchronous)</strong> : 작업의 시작 시점과 완료 시점이 같은 상황</p><p>주문 과정을 효율적으로 변경하기</p><ul><li>커피 주문이 blocking 되지 않고, 언제든지 주문을 받을 수 있게 한다.</li><li>커피가 완성되면 즉시 제공 : 손님1의 주문 완료 시점과 손님2의 주문 시작 시점이 같지 않아도 됨</li></ul><p>→ 이러한 합리적인 대안으로 Node.js를 non-blocking하고 비동기적(asynchronous)으로 작동하는 런타임으로 개발함.</p><p>JavaScript의 비동기적 실행(Asynchonous execution)이라는 개념은 웹 개발에서 유용</p><ul><li>백그라운드 실행, 로딩 창 등의 작업</li><li>인터넷에서 서버로 요청, 응담을 기다리는 작업</li><li>큰 용량의 파일을 로딩하는 작업</li></ul><p>⇒ 비동기적으로 작동되었을 때 효율적인 작업들</p><hr><h2 id="고차함수와-Callback"><a href="#고차함수와-Callback" class="headerlink" title="고차함수와 Callback"></a>고차함수와 Callback</h2><p>[고차함수, Higher order function]</p><ul><li><p>다른 함수를 인자로 전달받을 수 있음</p></li><li><p>다른 함수를 리턴할 수 있음</p></li><li><p>함수를 리턴하는 함수, 함수를 인자로 받는 함수 ⇒ 고차함수</p></li><li><p>고차함수는 콜백 함수와 커리 함수의 상위 개념</p><p>  콜백 함수를 전달받은 caller 함수 &#x3D; 함수 내부에서 이 콜백 함수를 호출(invoke) 가능</p></li></ul><hr><h1 id="UnderBar"><a href="#UnderBar" class="headerlink" title="UnderBar"></a>UnderBar</h1><p>: 배열, 객체를 다루는 라이브러리.</p><p> underbar 라이브러리를 구현하며 자바스크립트 내장 메소드가 어떻게 callback 함수를 활용하는지 원리 이해하기.</p><p>모티브가 되는 라이브러리로 <a href="https://underscorejs.org/">underscore.js</a>, <a href="https://lodash.com/">lodash</a> 등</p><hr><h3 id="자바스크립트-배열-내장-메소드-forEach-x2F-map-x2F-filter-x2F-reduce"><a href="#자바스크립트-배열-내장-메소드-forEach-x2F-map-x2F-filter-x2F-reduce" class="headerlink" title="# 자바스크립트 배열 내장 메소드 [forEach &#x2F; map &#x2F; filter &#x2F; reduce ]"></a># 자바스크립트 배열 내장 메소드 [forEach &#x2F; map &#x2F; filter &#x2F; reduce ]</h3><ul><li>forEach : 배열의 각 요소들을 개별적으로 반환</li><li>map : 모든 요소에게 동일한 행동 후 다시 반환</li><li>filter : 모든 요소 중 조건에 맞는 값들만 반환</li><li>reduce : 전달된 초기값을 기준으로 누적시켜 새로운 값 반환</li></ul><h3 id="callback-함수를-전달하여-사용"><a href="#callback-함수를-전달하여-사용" class="headerlink" title="# callback 함수를 전달하여 사용"></a># callback 함수를 전달하여 사용</h3><p>값으로 전달된 함수는 내부적으로 호출될 수 있기 때문에, 원래 함수의 기본적인 동작 방법을 변경할 숭 있다.</p><p>함수가 다른 함수의 인자로 사용되어 그 함수의 내용을 바꿀 수 있는 것이 콜백(callback)함수.</p><p>콜백이 비동기처리에서 사용될 때, 시간이 오래 걸리는 작업이 완료된 후에 처리해야 할 일을 콜백으로 지정하면 해당 작업이 끝났을 때 미리 등록한 작업을 실행하도록 할 수 있다.</p><h3 id="closure-함수를-리턴하여-활용"><a href="#closure-함수를-리턴하여-활용" class="headerlink" title="# closure 함수를 리턴하여 활용"></a># closure 함수를 리턴하여 활용</h3><p>내부함수가 외부함수의 내용에 접근할 수 있는 개념이다.</p><p>외부함수의 실행이 종료되어 외부함수가 소멸된 이후에도 외부함수의 범위(scope)에 접근할 수 있는 내부함수.</p><p>⇒ 자바스크립트에서 함수가 값으로 취급되어 함수를 parameter로도 받을 수 있고 [→Callback], return 할 수도 있다[→Closure].</p><h3 id="…-Spread-Syntax-를-사용하여-인자의-개수-파악-및-인자에-접근"><a href="#…-Spread-Syntax-를-사용하여-인자의-개수-파악-및-인자에-접근" class="headerlink" title="# …(Spread Syntax)를 사용하여 인자의 개수 파악 및 인자에 접근"></a># …(Spread Syntax)를 사용하여 인자의 개수 파악 및 인자에 접근</h3><ul><li>rest parameter : 개별의 요소들을 하나의 배열로 묶기 위해 사용<ul><li>매개변수 앞에 점 …을 붙여서 정의한 매개변수 ⇒ 묶인 요소들의 타입은 ‘배열’로 출력</li></ul></li><li>spread syntax : 하나의 요소를 개별의 요소들로 펼치기 위해 사용<ul><li>배열, 문자열, 객체 등 Iterable Object를 각각의 요소로 펼칠 수 있다.</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My Profile</title>
      <link href="/2022/03/29/Profile/"/>
      <url>/2022/03/29/Profile/</url>
      
        <content type="html"><![CDATA[<p>안녕하세요. <a href="https://yu-uj.github.io/">블로그</a>입니다.<br>첫번째 포스트 입니다.</p><h2 id="부제목"><a href="#부제목" class="headerlink" title="부제목"></a>부제목</h2><h3 id="덜-큰-부제목"><a href="#덜-큰-부제목" class="headerlink" title="덜 큰 부제목"></a>덜 큰 부제목</h3><p>끝.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
